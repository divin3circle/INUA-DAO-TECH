type EducationalContent = record {
  id : text;
  title : text;
  content : text;
  link : text;
  paid : bool;
  datePublished : text;
};
type Proposal = record {
  id : text;
  status : text;
  isApproved : bool;
  title : text;
  owner : text;
  votes : nat;
  datePublished : text;
  description : text;
};
type Team = record {
  id : text;
  content : vec EducationalContent;
  members : vec User;
  name : text;
  description : text;
};
type User = record {
  id : text;
  teams : vec Team;
  votingPowerMaturityDate : text;
  username : text;
  votingPower : nat;
  role : text;
  businessType : text;
  dateStaked : text;
  membershipDate : text;
  proposals : vec Proposal;
  tokenBalance : nat;
  stakedAmount : nat;
  hasEducationalAccess : bool;
};
service : () -> {
  addEducationalContent : (text, EducationalContent) -> (
      opt EducationalContent,
    );
  addUserToTeam : (text, text) -> (bool);
  checkEducationalAccess : (text) -> (bool) query;
  createProposal : (Proposal) -> (Proposal);
  createUser : (User) -> (User);
  getAllProposals : () -> (vec Proposal) query;
  getNumberOfUsers : () -> (int) query;
  getProposal : (text) -> (opt Proposal) query;
  getProposals : () -> (vec Proposal) query;
  getTeams : () -> (vec Team) query;
  getUser : (text) -> (opt User) query;
  getUsers : () -> (vec User) query;
  isTeamPremium : (text) -> (bool) query;
  isUserMemberOfTeam : (text, text) -> (bool) query;
  updateProposal : (text, Proposal) -> (bool);
  updateUser : (text, User) -> (bool);
  voteOnProposal : (text, text, nat) -> (bool);
}